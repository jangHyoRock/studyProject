package dhi.optimizer.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import dhi.optimizer.model.db.CommonObjectEntity;

/*
 * JAP control repository.
 */
@Repository
public interface CommonObjectRepository extends JpaRepository<CommonObjectEntity, String> {
	@Query(value = "SELECT A.NN_MODEL_TIME, B.PSO_RESULT_TIME, C.OPC_HEARTBEAT, D.DCS_HEARTBEAT, E.SOLUTION_HEARTBEAT "
			+ "FROM "
			+ "( "
			+ "	SELECT MAX(TIMESTAMP) AS NN_MODEL_TIME FROM TB_NN_MODEL "
			+ ") A, "
			+ "( "
			+ "	SELECT MAX(TIMESTAMP) AS PSO_RESULT_TIME FROM TB_PSO_RESULT "
			+ ") B, "
			+ "( "
			+ "	SELECT CASE WHEN COUNT(*) > 1 THEN 0 ELSE 1 END AS OPC_HEARTBEAT "
			+ "	FROM "
			+ "	( "
			+ "		SELECT B.TAG_VAL "
			+ "		FROM TB_OP_DATA_CONF A , TB_OP_DATA_INPUT B "
			+ "		WHERE A.TAG_ID = 'N_ATT2191' "
			+ "		AND A.TAG_NM = B.TAG_NM "
			+ "		AND B.TIMESTAMP > ADD_SECONDS(NOW(), -60 * 10) "
			+ "		GROUP BY B.TAG_VAL "
			+ "	) "
			+ ") C, "
			+ "( "
			+ "	SELECT CASE WHEN COUNT(*) > 1 THEN 0 ELSE 1 END AS DCS_HEARTBEAT "
			+ "	FROM "
			+ "	( "
			+ "		SELECT B.HB_TAG_VAL "
			+ "		FROM TB_CTR_DATA_CONF A , TB_HEARTBEAT_HIST B "
			+ "		WHERE A.TAG_ID = 'C_ATT1' "
			+ "		AND A.TAG_NM = B.HB_TAG_NM "
			+ "		AND B.TIMESTAMP > ADD_SECONDS(NOW(), -60 * 10) "
			+ "		GROUP BY B.HB_TAG_VAL "
			+ "	) "
			+ ") D, "
			+ "( "
			+ "	SELECT CASE WHEN COUNT(*) > 1 THEN 0 ELSE 1 END AS SOLUTION_HEARTBEAT "
			+ "	FROM "
			+ "	( "
			+ "		SELECT B.HB_TAG_VAL "
			+ "		FROM TB_CTR_DATA_CONF A , TB_HEARTBEAT_HIST B "
			+ "		WHERE A.TAG_ID = 'C_ATT25' "
			+ "		AND A.TAG_NM = B.HB_TAG_NM "
			+ "		AND B.TIMESTAMP > ADD_SECONDS(NOW(), -60 * 10) "
			+ "		GROUP BY B.HB_TAG_VAL "
			+ "	) "
			+ ") E "
			+ "", nativeQuery = true)
	List<Object[]> getAlgorithmSolutionStatusResult();
	
	@Query(value = "SELECT A.PSO_MV, A.PSO_MV_TYPE, B.OUTPUT_BIAS, B.HOLD_STATUS "
			+ "FROM TB_PSO_MV_INFO A LEFT OUTER JOIN  "
			+ "( "
			+ "	SELECT A.PSO_MV, MAX( "
			+ "	CASE WHEN A.PSO_MV ='CN1' AND B.TAG_ID = 'C_ATT36' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN2' AND B.TAG_ID = 'C_ATT37' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN3' AND B.TAG_ID = 'C_ATT38' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN4' AND B.TAG_ID = 'C_ATT39' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='LEFT' AND B.TAG_ID = 'C_ATT40' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='FRONT' AND B.TAG_ID = 'C_ATT41' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='RIGHT' AND B.TAG_ID = 'C_ATT42' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='REAR' AND B.TAG_ID = 'C_ATT43' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='TOTAL_AIR' AND B.TAG_ID = 'C_ATT33' THEN C.TAG_VAL "
			+ "	END END END END END END END END END ) AS OUTPUT_BIAS, "
			+ "	MAX( "
			+ "	CASE WHEN A.PSO_MV ='CN1' AND B.TAG_ID = 'C_ATT44' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN2' AND B.TAG_ID = 'C_ATT45' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN3' AND B.TAG_ID = 'C_ATT46' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN4' AND B.TAG_ID = 'C_ATT47' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='LEFT' AND B.TAG_ID = 'C_ATT48' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='FRONT' AND B.TAG_ID = 'C_ATT49' THEN C.TAG_VAL ELSE "
			+ 	"CASE WHEN A.PSO_MV ='RIGHT' AND B.TAG_ID = 'C_ATT50' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='REAR' AND B.TAG_ID = 'C_ATT51' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='TOTAL_AIR' AND B.TAG_ID = 'C_ATT35' THEN C.TAG_VAL "
			+ "	END END END END END END END END END ) AS HOLD_STATUS "
			+ "	FROM TB_PSO_MV_INFO A, TB_CTR_DATA_CONF B, TB_CTR_DATA_OUTPUT C "
			+ "	WHERE B.TAG_NM = C.TAG_NM "
			+ "	AND B.TAG_ID IN ('C_ATT33', 'C_ATT36', 'C_ATT37', 'C_ATT38', 'C_ATT39', 'C_ATT40', 'C_ATT41', 'C_ATT42', 'C_ATT43', 'C_ATT35', 'C_ATT44', 'C_ATT45', 'C_ATT46', 'C_ATT47', 'C_ATT48', 'C_ATT49', 'C_ATT50', 'C_ATT51') "
			+ "	GROUP BY A.PSO_MV "
			+ ") B ON A.PSO_MV = B.PSO_MV "
			+ "ORDER BY A.PSO_MV_ORDER ", nativeQuery = true)
	List<Object[]> getAlgorithmSolutionStatusMVOutputResult();
		
	@Query(value = "SELECT A.TRAIN_PROCESS_TIME, B.NN_TRAIN_TIME, I.ANY_BYPASS_VALVE_OPEN, I.ANY_OIL_BURNER_FIRING_ON, I.RUNBACK_ACTIVE_ON, I.UNIT_LOAD_TARGET_LOW, I.LOAD_CHANGE_DETECTED, I.FREQ_CORRECTION_ON "
			+ ", C.PREV_NN_MODEL_TIME, C.LAST_NN_MODEL_TIME, D.SEED_MODEL_1, D.SEED_MODEL_2, E.VALID_ERROR_RATE, E.FRUIT_MODEL_1, E.FRUIT_MODEL_2, FRUIT_MODEL_3 "
			+ ", F.PSO_RESULT_TIME, F.PSO_ERROR_SUM, G.NNMODEL_ALLOW_VALUE, F.PSO_OPTIMAL_F_VAL, F.PSO_OP_DATA_F_VAL, F.OPTIMAL_POSITION "
			+ ", H.OUTPUT_CONTROLLER_TIME, J.OUTPUT_FULL_HOLD, J.OUTPUT_INITIALIZE "
			+ "FROM  "
			+ "( "
			+ "	SELECT MAX(START_TIME) AS TRAIN_PROCESS_TIME FROM TB_NN_TRAIN_PRE_PROCESS_RESULT "
			+ ") A, "
			+ "( "
			+ "	SELECT MAX(TIMESTAMP) AS NN_TRAIN_TIME FROM TB_NN_TRAIN_IN "
			+ ") B, "
			+ "( "
			+ "	SELECT MAX(CASE WHEN RANK = 2 THEN TIMESTAMP END) AS PREV_NN_MODEL_TIME, "
			+ " MAX(CASE WHEN RANK = 1 THEN TIMESTAMP END) AS LAST_NN_MODEL_TIME "
			+ " FROM "
			+ " ( "
			+ "		SELECT TIMESTAMP, RANK() OVER(ORDER BY TIMESTAMP DESC) AS RANK "
			+ "		FROM (SELECT TOP 2 TIMESTAMP FROM TB_NN_MODEL ORDER BY TIMESTAMP DESC) "
			+ "	)"
			+ ") C , "
			+ "( "
			+ " SELECT MAX(CASE WHEN RANK = 1 THEN TIMESTAMP END) AS SEED_MODEL_1, "
			+ " MAX(CASE WHEN RANK = 2 THEN TIMESTAMP END) AS SEED_MODEL_2 "
			+ " FROM "
			+ " ( "
			+ " 	SELECT TIMESTAMP, RANK() OVER(ORDER BY TIMESTAMP DESC) AS RANK "
			+ "		FROM (SELECT TOP 2 TIMESTAMP FROM TB_NN_MODEL_BASE WHERE TRAIN_STATUS = TRUE ORDER BY TIMESTAMP DESC) "
			+ "	) "
			+ ") D, "
			+ "( "
			+ "	SELECT MAX(CASE WHEN RANK = 1 THEN TIMESTAMP END) AS FRUIT_MODEL_1, "
			+ "	MAX(CASE WHEN RANK = 2 THEN TIMESTAMP END) AS FRUIT_MODEL_2, "
			+ " MAX(CASE WHEN RANK = 3 THEN TIMESTAMP END) AS FRUIT_MODEL_3, "
			+ " MAX(CASE WHEN RANK = 1 THEN VALID_ERROR_RATE END) AS VALID_ERROR_RATE "
			+ " FROM  "
			+ " ( "
			+ "		SELECT TIMESTAMP, VALID_ERROR_RATE, RANK() OVER(ORDER BY TIMESTAMP ASC) AS RANK "
			+ "		FROM (SELECT TOP 3 TIMESTAMP, VALID_ERROR_RATE FROM TB_NN_MODEL WHERE TRAIN_STATUS = TRUE ORDER BY TIMESTAMP DESC) "
			+ " ) "
			+ ") E, "
			+ "( "
			+ "	SELECT TOP 1 TIMESTAMP AS PSO_RESULT_TIME, OPTIMAL_F_VAL AS PSO_OPTIMAL_F_VAL, ERROR_SUM AS PSO_ERROR_SUM, OP_DATA_F_VAL AS PSO_OP_DATA_F_VAL, OPTIMAL_POSITION "
			+ "	FROM TB_PSO_RESULT ORDER BY TIMESTAMP DESC "
			+ ") F, "
			+ "( "
			+ " SELECT NNMODEL_ALLOW_VALUE FROM TB_PSO_CONF "
			+ ") G, "
			+ "( "
			+ " SELECT MAX(TIMESTAMP) AS OUTPUT_CONTROLLER_TIME FROM TB_OUTPUT_DATA_HIST "
			+ ") H, "
			+ "( "
			+ "	SELECT MAX(CASE WHEN A.TAG_ID = 'C_ATT18' THEN B.TAG_VAL END) AS RUNBACK_ACTIVE_ON "
			+ " ,MAX(CASE WHEN A.TAG_ID = 'C_ATT19' THEN B.TAG_VAL END) AS LOAD_CHANGE_DETECTED "
			+ " ,MAX(CASE WHEN A.TAG_ID = 'C_ATT20' THEN B.TAG_VAL END) AS UNIT_LOAD_TARGET_LOW "
			+ " ,MAX(CASE WHEN A.TAG_ID = 'C_ATT21' THEN B.TAG_VAL END) AS FREQ_CORRECTION_ON "
			+ "	,MAX(CASE WHEN A.TAG_ID = 'C_ATT22' THEN B.TAG_VAL END) AS ANY_OIL_BURNER_FIRING_ON "
			+ "	,MAX(CASE WHEN A.TAG_ID = 'C_ATT23' THEN B.TAG_VAL END) AS ANY_BYPASS_VALVE_OPEN "
			+ "	,MAX(CASE WHEN A.TAG_ID = 'C_ATT24' THEN B.TAG_VAL END) AS BLR_PROCESS_DANGER_ALARM_ON "
			+ "	FROM TB_CTR_DATA_CONF A, TB_CTR_DATA_INPUT B "
			+ "	WHERE A.TAG_NM = B.TAG_NM "
			+ "	AND A.TAG_ID IN ('C_ATT18', 'C_ATT19', 'C_ATT20', 'C_ATT21', 'C_ATT22', 'C_ATT23', 'C_ATT24') "
			+ ") I, "
			+ "( "
			+ "	SELECT MAX(CASE WHEN A.TAG_ID = 'C_ATT34' THEN B.TAG_VAL END) AS OUTPUT_FULL_HOLD, "
			+ "	MAX(CASE WHEN A.TAG_ID = 'C_ATT54' THEN B.TAG_VAL END) AS OUTPUT_INITIALIZE "
			+ "	FROM TB_CTR_DATA_CONF A, TB_CTR_DATA_OUTPUT B "
			+ "	WHERE A.TAG_NM = B.TAG_NM "
			+ "	AND A.TAG_ID IN ('C_ATT34','C_ATT54') "
			+ ") J ", nativeQuery = true)
	List<Object[]> getAlgorithmProcessStatusResult();
	
	@Query(value = "SELECT A.PSO_MV, "
			+ "CASE WHEN A.PSO_MV_TYPE = 'Burner' THEN D.BNR_DAMPER_BIAS_MIN ELSE "
			+ "CASE WHEN A.PSO_MV_TYPE = 'OFA' THEN D.OFA_DAMPER_BIAS_MIN ELSE "
			+ "CASE WHEN A.PSO_MV_TYPE = 'Air' THEN D.AIR_BIAS_MIN END END END AS BIAS_MIN, "
			+ "B.OUTPUT_BIAS, B.HOLD_STATUS, "
			+ "CASE WHEN A.PSO_MV_TYPE = 'Burner' THEN D.BNR_DAMPER_BIAS_MAX ELSE "
			+ "CASE WHEN A.PSO_MV_TYPE = 'OFA' THEN D.OFA_DAMPER_BIAS_MAX ELSE "
			+ "CASE WHEN A.PSO_MV_TYPE = 'Air' THEN D.AIR_BIAS_MAX END END END AS BIAS_MAX, "
			+ "C.MV_TGT "
			+ "FROM TB_PSO_MV_INFO A LEFT OUTER JOIN  "
			+ "( "
			+ "	SELECT A.PSO_MV, MAX( "
			+ "	CASE WHEN A.PSO_MV ='CN1' AND B.TAG_ID = 'C_ATT36' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN2' AND B.TAG_ID = 'C_ATT37' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN3' AND B.TAG_ID = 'C_ATT38' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN4' AND B.TAG_ID = 'C_ATT39' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='LEFT' AND B.TAG_ID = 'C_ATT40' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='FRONT' AND B.TAG_ID = 'C_ATT41' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='RIGHT' AND B.TAG_ID = 'C_ATT42' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='REAR' AND B.TAG_ID = 'C_ATT43' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='TOTAL_AIR' AND B.TAG_ID = 'C_ATT33' THEN C.TAG_VAL "
			+ "	END END END END END END END END END ) AS OUTPUT_BIAS, "
			+ "	MAX( "
			+ "	CASE WHEN A.PSO_MV ='CN1' AND B.TAG_ID = 'C_ATT44' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN2' AND B.TAG_ID = 'C_ATT45' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN3' AND B.TAG_ID = 'C_ATT46' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='CN4' AND B.TAG_ID = 'C_ATT47' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='LEFT' AND B.TAG_ID = 'C_ATT48' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='FRONT' AND B.TAG_ID = 'C_ATT49' THEN C.TAG_VAL ELSE "
			+ 	"CASE WHEN A.PSO_MV ='RIGHT' AND B.TAG_ID = 'C_ATT50' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='REAR' AND B.TAG_ID = 'C_ATT51' THEN C.TAG_VAL ELSE "
			+ "	CASE WHEN A.PSO_MV ='TOTAL_AIR' AND B.TAG_ID = 'C_ATT35' THEN C.TAG_VAL "
			+ "	END END END END END END END END END ) AS HOLD_STATUS "
			+ "	FROM TB_PSO_MV_INFO A, TB_CTR_DATA_CONF B, TB_CTR_DATA_OUTPUT C "
			+ "	WHERE B.TAG_NM = C.TAG_NM "
			+ "	AND B.TAG_ID IN ('C_ATT33', 'C_ATT36', 'C_ATT37', 'C_ATT38', 'C_ATT39', 'C_ATT40', 'C_ATT41', 'C_ATT42', 'C_ATT43', 'C_ATT35', 'C_ATT44', 'C_ATT45', 'C_ATT46', 'C_ATT47', 'C_ATT48', 'C_ATT49', 'C_ATT50', 'C_ATT51') "
			+ "	GROUP BY A.PSO_MV "
			+ ") B ON A.PSO_MV = B.PSO_MV LEFT OUTER JOIN TB_OUTPUT_MV_TGT C "
			+ "ON A.PSO_MV = C.MV INNER JOIN TB_OUTPUT_BIAS_CONF D "
			+ "ON 1 = 1 "
			+ "ORDER BY A.PSO_MV_ORDER ", nativeQuery = true)
	List<Object[]> getAlgorithmProcessStatusMVOutputResult();
}
